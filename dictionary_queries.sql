SELECT * FROM INFORMATION_SCHEMA.TABLES
ORDER BY TABLE_SCHEMA,TABLE_TYPE, TABLE_NAME
;
-- use dictionary view to see the column def for a table
SELECT * FROM INFORMATION_SCHEMA.COLUMNS
where TABLE_SCHEMA = 'sales' and
table_name = 'salesorderheader'
order by ORDINAL_POSITION
;

--- This view tells you which primary key is the foreign key referrs to
--- constraint_name is the foreign key name
SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS
ORDER BY CONSTRAINT_SCHEMA,CONSTRAINT_NAME
;

--- this view presents the columns included in each key (primary and froeign)

SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
ORDER BY CONSTRAINT_SCHEMA,CONSTRAINT_NAME,TABLE_SCHEMA,TABLE_NAME
;

--- dump view text
exec sp_helptext 'sales.vsalesperson'

--- build joins between information schema to quick find
--- foreign keys referring to a primary key
SELECT C.TABLE_NAME AS CHILD_TABLE_NAME,
C.COLUMN_NAME AS CHILD_COL_NAME,
C.CONSTRAINT_NAME AS FK_NAME,
B.TABLE_NAME AS PARENT_TABLE_NAME,
B.COLUMN_NAME AS PARENT_COL_NAME,
B.CONSTRAINT_NAME AS PARENT_PK_NAME
FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS A
INNER JOIN
INFORMATION_SCHEMA.KEY_COLUMN_USAGE C
ON
A.CONSTRAINT_SCHEMA = C.CONSTRAINT_SCHEMA AND
A.CONSTRAINT_NAME = C.CONSTRAINT_NAME
INNER JOIN
INFORMATION_SCHEMA.KEY_COLUMN_USAGE B
ON
A.UNIQUE_CONSTRAINT_CATALOG = B.CONSTRAINT_CATALOG AND
A.UNIQUE_CONSTRAINT_SCHEMA = B.CONSTRAINT_SCHEMA AND
A.UNIQUE_CONSTRAINT_NAME = B.CONSTRAINT_NAME
WHERE B.TABLE_SCHEMA = 'Person' AND
B.TABLE_NAME = 'Person'